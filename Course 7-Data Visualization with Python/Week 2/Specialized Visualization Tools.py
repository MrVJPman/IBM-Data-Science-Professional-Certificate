#Pie Charts, Box Plots, Scatter Plots, and Bubble Plots

import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library

df_can = pd.read_excel('https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx',
                       sheet_name='Canada by Citizenship',
                       skiprows=range(20),
                       skipfooter=2
                      )
print('Data downloaded and read into a dataframe!')


# clean up the dataset to remove unnecessary columns (eg. REG) 
df_can.drop(['AREA', 'REG', 'DEV', 'Type', 'Coverage'], axis=1, inplace=True)
# let's rename the columns so that they make sense
df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent','RegName':'Region'}, inplace=True)
# for sake of consistency, let's also make all column labels of type string
df_can.columns = list(map(str, df_can.columns))
# set the country name as index - useful for quickly looking up countries using .loc method
df_can.set_index('Country', inplace=True)
# add total column
df_can['Total'] = df_can.sum(axis=1)
# years that we will be using in this lesson - useful for plotting later on
years = list(map(str, range(1980, 2014)))
print('data dimensions:', df_can.shape)

#%matplotlib inline

import matplotlib as mpl
import matplotlib.pyplot as plt

mpl.style.use('ggplot') # optional: for ggplot-like style



#Pie Charts
# group countries by continents and apply sum() function 
df_continents = df_can.groupby('Continent', axis=0).sum()



colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.

# autopct create %, start angle represent starting point
df_continents['Total'].plot(kind='pie',
                            figsize=(5, 6),
                            autopct='%1.1f%%', # add in percentages
                            startangle=90,     # start angle 90° (Africa)
                            shadow=True,       # add shadow      
                            labels=None,         # turn off labels on pie chart
                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                            colors=colors_list,  # add custom colors
                            explode=explode_list # 'explode' lowest 3 continents
                            )

# scale the title up by 12% to match pctdistance
plt.title('Immigration to Canada by Continent [1980 - 2013]', y=1.12) 
plt.axis('equal') # Sets the pie chart to look like a circle.
# add legend
plt.legend(labels=df_continents.index, loc='upper left') 

plt.show()













#Question: Using a pie chart, explore the proportion (percentage) of new immigrants grouped by continents in the year 2013.

df_continents = df_can.groupby('Continent', axis=0).sum()
explode_list = [0.1, 0, 0, 0, 0.1, 0.2] # ratio for each continent with which to offset each wedge.
df_continents['2013'].plot(kind='pie',
                            figsize=(15, 6),
                            autopct='%1.1f%%', 
                            startangle=90,    
                            shadow=True,       
                            labels=None,         # turn off labels on pie chart
                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                            explode=explode_list # 'explode' lowest 3 continents
                            )
plt.title('Immigration to Canada by Continent in 2013') 
plt.axis('equal') # Sets the pie chart to look like a circle.
plt.legend(labels=df_continents.index, loc='upper left') 
plt.show()






#Box Plots :  statistically representing the distribution of the data through five main dimensions:

# to get a dataframe, place extra square brackets around 'Japan'.
df_japan = df_can.loc[['Japan'], years].transpose()
df_japan.plot(kind='box', figsize=(8, 6))

plt.title('Box plot of Japanese Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')

plt.show()


#Question: Compare the distribution of the number of new immigrants from India and China for the period 1980 - 2013.

#Step 1: Get the dataset for China and India and call the dataframe df_CI.
df_CI = df_can.loc[['China', "India"], years].transpose()
#Step 2: Plot data.

df_CI.plot(kind="box", figsize=(8, 6))
plt.title('Box plots of Immigrants from China and India (1980 - 2013)')
plt.ylabel('Number of Immigrants')
plt.show()

#If you prefer to create horizontal box plots, 
#you can pass the vert parameter in the plot function and assign it to False. 
#You can also specify a different color in case you are not a big fan of the default red color.

# horizontal box plots
df_CI.plot(kind='box', figsize=(10, 7), color='blue', vert=False)

plt.title('Box plots of Immigrants from China and India (1980 - 2013)')
plt.xlabel('Number of Immigrants')

plt.show()
















#Subplots

fig = plt.figure() # create figure

ax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)
ax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**

# Subplot 1: Box plot
df_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1
ax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')
ax0.set_xlabel('Number of Immigrants')
ax0.set_ylabel('Countries')

# Subplot 2: Line plot
df_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2
ax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')
ax1.set_ylabel('Number of Immigrants')
ax1.set_xlabel('Years')

plt.show()



#Question: Create a box plot to visualize the distribution of the top 15 countries 
#(based on total immigration) grouped by the decades 1980s, 1990s, and 2000s.

#Step 1: Get the dataset. Get the top 15 countries based on Total immigrant population. Name the dataframe df_top15.
df_can.sort_values(['Total'], ascending=False, axis=0, inplace=True)
df_top15 = df_can.head(15)

#Step 2: Create a new dataframe which contains the aggregate for each decade. One way to do that:

#Create a list of all years in decades 80's, 90's, and 00's.
#Slice the original dataframe df_can to create a series for each decade and sum across all years for each country.
#Merge the three series into a new data frame. Call your dataframe new_df.


#create the years
years_from_80s = [str(year) for year in range(1980, 1990)]
years_from_90s = [str(year) for year in range(1990, 2000)]
years_from_00s = [str(year) for year in range(2000, 2010)]

#retrieve 80s, 90s, 00s from df_can
df_can_80s = df_can[years_from_80s]
df_can_90s = df_can[years_from_90s]
df_can_00s = df_can[years_from_00s]

#create the total column for each
df_can_80s['1980s'] = df_can_80s.sum(axis=1)
df_can_90s['1990s'] = df_can_90s.sum(axis=1)
df_can_00s['2000s'] = df_can_00s.sum(axis=1)

df_new_can_80s = df_can_80s['1980s'].to_frame()
df_new_can_90s = df_can_90s['1990s'].to_frame()
df_new_can_00s = df_can_00s['2000s'].to_frame()

new_df = pd.concat([df_new_can_80s, df_new_can_90s, df_new_can_00s], axis=1)


#IBM's solution :
## create a list of all years in decades 80's, 90's, and 00's
#years_80s = list(map(str, range(1980, 1990))) 
#years_90s = list(map(str, range(1990, 2000))) 
#years_00s = list(map(str, range(2000, 2010))) 

# slice the original dataframe df_can to create a series for each decade
#df_80s = df_top15.loc[:, years_80s].sum(axis=1) 
#df_90s = df_top15.loc[:, years_90s].sum(axis=1) 
#df_00s = df_top15.loc[:, years_00s].sum(axis=1)

# merge the three series into a new data frame
#new_df = pd.DataFrame({'1980s': df_80s, '1990s': df_90s, '2000s':df_00s}) 

# display dataframe
#new_df.head()

#Step 3: Plot the box plots.  

new_df.plot(kind="box", figsize=(8, 6))
plt.title('Immigration from top 15 countries for decades 80s, 90s and 2000s')
plt.ylabel('Number of Immigrants')
plt.show()















#Scatter Plots

# we can use the sum() method to get the total population per year
df_tot = pd.DataFrame(df_can[years].sum(axis=0))

# change the years to type int (useful for regression later on)
df_tot.index = map(int, df_tot.index)

# reset the index to put in back in as a column in the df_tot dataframe
df_tot.reset_index(inplace = True)

# rename columns
df_tot.columns = ['year', 'total']

# view the final dataframe
df_tot.head()



df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')

plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')

plt.show()

#Step 1: Get the equation of line of best fit. We will use Numpy's polyfit() method by passing in the following:
x = df_tot['year']      # year on x-axis
y = df_tot['total']     # total on y-axis
fit = np.polyfit(x, y, deg=1)

#Step 2: Plot the regression line on the scatter plot.

df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')

plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')

# plot line of best fit
plt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years
plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))

plt.show()

# print out the line of best fit
'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) 



#Question: Create a scatter plot of the total immigration from Denmark, Norway, and Sweden to Canada from 1980 to 2013?

#Step 1: Get the data:

#i)Create a dataframe the consists of the numbers associated with Denmark, Norway, and Sweden only. Name it df_countries.
df_countries = df_can.loc[(df_can.index == 'Denmark') | (df_can.index == 'Norway') | (df_can.index == 'Sweden')]
#df_countries = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()



#ii)Sum the immigration numbers across all three countries for each year and turn the result into a dataframe. 
#Name this new dataframe df_total.
df_total = pd.DataFrame(df_countries[years].sum(axis=0))
#df_total = pd.DataFrame(df_countries.sum(axis=1))

#iii)Reset the index in place.
df_total.reset_index(inplace = True)

#iv)Rename the columns to year and total.
df_total.columns = ['year', 'total']

#v)Display the resulting dataframe.
df_total['year'] = df_total['year'].astype(int)

#Step 2: Generate the scatter plot by plotting the total versus year in **df_total**.

df_total.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')
plt.title('Total Immigration to Canada during 1980 - 2013 from Denmark/Norway/Sweden')
plt.xlabel('Year')
plt.ylabel('Number of immigrants')















#Bubble Plots

df_can_t = df_can[years].transpose() # transposed dataframe
# cast the Years (the index) to type int
df_can_t.index = map(int, df_can_t.index)
# let's label the index. This will automatically be the column name when we reset the index
df_can_t.index.name = 'Year'
# reset index to bring the Year in as a column
df_can_t.reset_index(inplace=True)
# view the changes
df_can_t.head()


# normalize Brazil data
norm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) / (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())

# normalize Argentina data
norm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) / (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())



# Brazil
ax0 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Brazil',
                    figsize=(14, 8),
                    alpha=0.5,                  # transparency
                    color='green',
                    s=norm_brazil * 2000 + 10,  # pass in weights 
                    xlim=(1975, 2015)
                   )

# Argentina
ax1 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Argentina',
                    alpha=0.5,
                    color="blue",
                    s=norm_argentina * 2000 + 10,
                    ax = ax0
                   )

ax0.set_ylabel('Number of Immigrants')
ax0.set_title('Immigration from Brazil and Argentina from 1980 - 2013')
ax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')



#Question: Previously in this lab, we created box plots to compare immigration from China and India to Canada. 
#Create bubble plots of immigration from China and India to visualize any differences with time from 1980 to 2013.
#You can use df_can_t that we defined and used in the previous example.

#Step 1: Normalize the data pertaining to China and India.

# normalized China data
norm_china = (df_can_t['China'] - df_can_t['China'].min()) / (df_can_t['China'].max() - df_can_t['China'].min())

# normalize India data
norm_india = (df_can_t['India'] - df_can_t['India'].min()) / (df_can_t['India'].max() - df_can_t['India'].min())

#Step 2: Generate the bubble plots.

### type your answer here

ax0 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='China',
                    figsize=(14, 8),
                    alpha=0.5,                  # transparency
                    color='red',
                    s=norm_china * 2000 + 10,  # pass in weights 
                    xlim=(1975, 2015)
                   )

# Argentina
ax1 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='India',
                    alpha=0.5,
                    color="green",
                    s=norm_india * 2000 + 10,
                    ax = ax0
                   )

ax0.set_ylabel('Number of Immigrants')
ax0.set_title('Immigration from China and India from 1980 - 2013')
ax0.legend(['China', 'India'], loc='upper left', fontsize='x-large')

